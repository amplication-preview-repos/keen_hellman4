/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gallery } from "./Gallery";
import { GalleryCountArgs } from "./GalleryCountArgs";
import { GalleryFindManyArgs } from "./GalleryFindManyArgs";
import { GalleryFindUniqueArgs } from "./GalleryFindUniqueArgs";
import { CreateGalleryArgs } from "./CreateGalleryArgs";
import { UpdateGalleryArgs } from "./UpdateGalleryArgs";
import { DeleteGalleryArgs } from "./DeleteGalleryArgs";
import { PhotoFindManyArgs } from "../../photo/base/PhotoFindManyArgs";
import { Photo } from "../../photo/base/Photo";
import { GalleryService } from "../gallery.service";
@graphql.Resolver(() => Gallery)
export class GalleryResolverBase {
  constructor(protected readonly service: GalleryService) {}

  async _galleriesMeta(
    @graphql.Args() args: GalleryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gallery])
  async galleries(
    @graphql.Args() args: GalleryFindManyArgs
  ): Promise<Gallery[]> {
    return this.service.galleries(args);
  }

  @graphql.Query(() => Gallery, { nullable: true })
  async gallery(
    @graphql.Args() args: GalleryFindUniqueArgs
  ): Promise<Gallery | null> {
    const result = await this.service.gallery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gallery)
  async createGallery(
    @graphql.Args() args: CreateGalleryArgs
  ): Promise<Gallery> {
    return await this.service.createGallery({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Gallery)
  async updateGallery(
    @graphql.Args() args: UpdateGalleryArgs
  ): Promise<Gallery | null> {
    try {
      return await this.service.updateGallery({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gallery)
  async deleteGallery(
    @graphql.Args() args: DeleteGalleryArgs
  ): Promise<Gallery | null> {
    try {
      return await this.service.deleteGallery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Photo], { name: "photos" })
  async findPhotos(
    @graphql.Parent() parent: Gallery,
    @graphql.Args() args: PhotoFindManyArgs
  ): Promise<Photo[]> {
    const results = await this.service.findPhotos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
