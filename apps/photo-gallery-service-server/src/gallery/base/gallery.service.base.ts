/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Gallery as PrismaGallery,
  Photo as PrismaPhoto,
} from "@prisma/client";

export class GalleryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GalleryCountArgs, "select">): Promise<number> {
    return this.prisma.gallery.count(args);
  }

  async galleries(args: Prisma.GalleryFindManyArgs): Promise<PrismaGallery[]> {
    return this.prisma.gallery.findMany(args);
  }
  async gallery(
    args: Prisma.GalleryFindUniqueArgs
  ): Promise<PrismaGallery | null> {
    return this.prisma.gallery.findUnique(args);
  }
  async createGallery(args: Prisma.GalleryCreateArgs): Promise<PrismaGallery> {
    return this.prisma.gallery.create(args);
  }
  async updateGallery(args: Prisma.GalleryUpdateArgs): Promise<PrismaGallery> {
    return this.prisma.gallery.update(args);
  }
  async deleteGallery(args: Prisma.GalleryDeleteArgs): Promise<PrismaGallery> {
    return this.prisma.gallery.delete(args);
  }

  async findPhotos(
    parentId: string,
    args: Prisma.PhotoFindManyArgs
  ): Promise<PrismaPhoto[]> {
    return this.prisma.gallery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .photos(args);
  }
}
